// <copyright file="DrasticASS.cs" company="Drastic Actions">
// Copyright (c) Drastic Actions. All rights reserved.
// </copyright>

using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;

namespace Drastic.ASS
{
    public class DrasticASS : ICloneable
    {
        private List<CA_Event> events = new List<CA_Event>();
        private List<CA_Style> styles = new List<CA_Style>();
        private CA_Infos assinfos = new CA_Infos();
        private string videoPath = null;

        public DrasticASS()
        {
        }

        public string VideoPath { get => this.videoPath; set => this.videoPath = value; }

        public List<CA_Event> Events
        {
            get { return this.events; }
        }

        public void LoadASS(string path)
        {
            string line;
            this.events.Clear();
            this.styles.Clear();

            using (StreamReader sr = new StreamReader(path))
            {
                while ((line = sr.ReadLine()) != null)
                {
                    if (!line.StartsWith("Style") & !line.StartsWith("Dialogue") & !line.StartsWith("Comment"))
                    {
                        this.assinfos.TryAdd(line);
                    }

                    if (line.StartsWith("Style"))
                    {
                        CA_Style asss = new CA_Style(line);
                        this.styles.Add(asss);
                    }

                    if (line.StartsWith("Dialogue") | line.StartsWith("Comment"))
                    {
                        CA_Event txt = new CA_Event(line);
                        this.events.Add(txt);
                    }
                }
            }
        }

        public void SaveASS(string path, string software = "Drastic.ASS library", string website = "unknown")
        {
            using (StreamWriter sw = new StreamWriter(path))
            {
                sw.AutoFlush = true;

                sw.WriteLine("[Script Info]");
                sw.WriteLine("; Script generated by " + software);
                if (website != "unknown")
                {
                    sw.WriteLine("; " + website);
                }

                sw.WriteLine("Title: " + this.assinfos.Title);
                sw.WriteLine("Original Script: " + this.assinfos.OriginalScript);
                sw.WriteLine("Original Translation: " + this.assinfos.OriginalTranslation);
                sw.WriteLine("Original Editing: " + this.assinfos.OriginalEditing);
                sw.WriteLine("Original Timing: " + this.assinfos.OriginalTiming);
                sw.WriteLine("Original Script Checking: " + this.assinfos.OriginalScriptChecking);
                sw.WriteLine("ScriptType: " + this.assinfos.ScriptType);
                sw.WriteLine("PlayResX: " + this.assinfos.PlayResX);
                sw.WriteLine("PlayResY: " + this.assinfos.PlayResY);
                sw.WriteLine("PlayDepth: " + this.assinfos.PlayDepth);
                sw.WriteLine("Wav: " + this.assinfos.Wav);
                sw.WriteLine("LastWav: " + this.assinfos.LastWav);
                sw.WriteLine("Timer: " + this.assinfos.Timer);
                sw.WriteLine("WrapStyle: " + this.assinfos.WrapStyle);
                sw.WriteLine("Video Aspect Ratio: " + this.assinfos.VideoAspectRatio);
                sw.WriteLine("Video Zoom: " + this.assinfos.VideoZoom);
                sw.WriteLine("YCbCr Matrix: " + this.assinfos.YCbCrMatrix);
                sw.WriteLine(string.Empty);

                sw.WriteLine("[Aegisub Project Garbage]");
                sw.WriteLine("Last Style Storage: " + this.assinfos.LastStyleStorage);
                sw.WriteLine("Audio File: " + this.assinfos.AudioFile);
                sw.WriteLine("Video File: " + this.assinfos.VideoFile);
                sw.WriteLine("Video AR Mode: " + this.assinfos.VideoARMode);
                sw.WriteLine("Video AR Value: " + this.assinfos.VideoARValue);
                sw.WriteLine("Video Zoom Percent: " + this.assinfos.VideoZoomPercent);
                sw.WriteLine("Active Line: " + this.assinfos.ActiveLine);
                sw.WriteLine("Video Position: " + this.assinfos.VideoPosition);
                sw.WriteLine(string.Empty);

                sw.WriteLine("[V4+ Styles]");
                sw.WriteLine("Format: Name, Fontname, Fontsize," +
                    " PrimaryColour, SecondaryColour, OutlineColour, BackColour," +
                    " Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle," +
                    " BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding");
                foreach (CA_Style sty in this.styles)
                {
                    sw.WriteLine(sty.GetRawLine());
                }

                sw.WriteLine(string.Empty);

                sw.WriteLine("[Events]");
                sw.WriteLine("Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text");
                foreach (CA_Event evt in this.events)
                {
                    sw.WriteLine(evt.GetRawLine());
                }
            }
        }

        /// <summary>
        /// Add a dialogue event to Events.
        /// </summary>
        /// <param name="layer">Layer in integer.</param>
        /// <param name="start">Start in hh:mm:ss:cc format.</param>
        /// <param name="end">End in hh:mm:ss:cc format.</param>
        /// <param name="style">Name of the Style.</param>
        /// <param name="name_or_actor">A string.</param>
        /// <param name="marginL">An integer.</param>
        /// <param name="marginR">An integer.</param>
        /// <param name="marginV">An integer.</param>
        /// <param name="effect">A string.</param>
        /// <param name="text">Your text or karaoke.</param>
        /// <param name="index">Index of the event in Events or not if -1.</param>
        public void AddDialogueEvent(int layer, string start, string end, string style, string name_or_actor,
            int marginL, int marginR, int marginV, string effect, string text, int index = -1)
        {
            CA_Event cae = new CA_Event();
            cae.Comment = false;
            cae.Layer = layer;
            cae.Start = cae.GetTime(start);
            cae.End = cae.GetTime(end);
            cae.Style = style;
            cae.NameOrActor = name_or_actor;
            cae.MarginL = marginL;
            cae.MarginR = marginR;
            cae.MarginV = marginV;
            cae.Effect = effect;
            cae.Text = text;
            if (index != -1)
            {
                this.events.Insert(index, cae);
            }
            else
            {
                this.events.Add(cae);
            }
        }

        /// <summary>
        /// Add a comment event to Events.
        /// </summary>
        /// <param name="layer">Layer in integer.</param>
        /// <param name="start">Start in hh:mm:ss:cc format.</param>
        /// <param name="end">End in hh:mm:ss:cc format.</param>
        /// <param name="style">Name of the Style.</param>
        /// <param name="name_or_actor">A string.</param>
        /// <param name="marginL">An integer.</param>
        /// <param name="marginR">An integer.</param>
        /// <param name="marginV">An integer.</param>
        /// <param name="effect">A string.</param>
        /// <param name="text">Your text or karaoke.</param>
        /// <param name="index">Index of the event in Events or not if -1.</param>
        public void AddCommentEvent(int layer, string start, string end, string style, string name_or_actor,
            int marginL, int marginR, int marginV, string effect, string text, int index = -1)
        {
            CA_Event cae = new CA_Event();
            cae.Comment = true;
            cae.Layer = layer;
            cae.Start = cae.GetTime(start);
            cae.End = cae.GetTime(end);
            cae.Style = style;
            cae.NameOrActor = name_or_actor;
            cae.MarginL = marginL;
            cae.MarginR = marginR;
            cae.MarginV = marginV;
            cae.Effect = effect;
            cae.Text = text;
            if (index != -1)
            {
                this.events.Insert(index, cae);
            }
            else
            {
                this.events.Add(cae);
            }
        }

        /// <summary>
        /// Remove an event from Events.
        /// </summary>
        /// <param name="index">Index of the event in Events.</param>
        public void RemoveEvent(int index)
        {
            this.events.RemoveAt(index);
        }

        public List<CA_Style> Styles
        {
            get { return this.styles; }
        }

        public CA_Infos Infos
        {
            get { return this.assinfos; }
        }

        // public void LoadSample()
        // {
        //    UI.Sample sample = new UI.Sample();
        //    sample.Init(this);
        //    sample.Show();
        // }

        /// <inheritdoc/>
        public object Clone()
        {
            return this.MemberwiseClone();
        }

        public void PutStyle(string name, string fontname, string fontsize,
            string firstcolor, string secondcolor, string thirdcolor, string fourthcolor,
            string bold, string italic, string underline, string strikeout,
            string scaleX, string scaleY, string spacing, string angleZ,
            string borderstyle, string outline, string shadow, string alignment,
            string marginL, string marginR, string marginV, string encoding, int index = -1)
        {
            CA_Style cas = new CA_Style();

            bool containsName = false;
            foreach (CA_Style sty in this.styles)
            {
                if (sty.Name == name)
                {
                    cas = sty;
                    containsName = true;
                    break;
                }
            }

            if (containsName == false)
            {
                cas.Name = name;
            }
            cas.Font = new CA_Font(fontname, fontsize, bold, italic, underline, strikeout);
            cas.PrimaryColour = new CA_Color(firstcolor);
            cas.KaraokeColour = new CA_Color(secondcolor);
            cas.OutlineColour = new CA_Color(thirdcolor);
            cas.BackColour = new CA_Color(fourthcolor);
            cas.ScaleX = Convert.ToSingle(scaleX);
            cas.ScaleY = Convert.ToSingle(scaleY);
            cas.Spacing = Convert.ToInt32(spacing);
            cas.Angle = Convert.ToSingle(angleZ);
            cas.Borderline = Convert.ToInt32(borderstyle);
            cas.Outline = Convert.ToSingle(outline);
            cas.Shadow = Convert.ToSingle(shadow);
            cas.Alignment = Convert.ToInt32(alignment);
            cas.MarginL = Convert.ToInt32(marginL);
            cas.MarginR = Convert.ToInt32(marginR);
            cas.MarginV = Convert.ToInt32(marginV);
            cas.Encoding = Convert.ToInt32(encoding);

            if (index != -1)
            {
                this.styles.Insert(index, cas);
            }
            else
            {
                this.styles.Add(cas);
            }
        }

        public void PutStyle(string name, CA_Font font,
            CA_Color firstcolor, CA_Color secondcolor, CA_Color thirdcolor, CA_Color fourthcolor,
            float scaleX, float scaleY, int spacing, float angleZ,
            int borderstyle, float outline, float shadow, int alignment,
            int marginL, int marginR, int marginV, int encoding, int index = -1)
        {
            CA_Style cas = new CA_Style();

            bool containsName = false;
            foreach (CA_Style sty in this.styles)
            {
                if (sty.Name == name)
                {
                    cas = sty;
                    containsName = true;
                    break;
                }
            }

            if (containsName == false)
            {
                cas.Name = name;
            }
            cas.Font = font;
            cas.PrimaryColour = firstcolor;
            cas.KaraokeColour = secondcolor;
            cas.OutlineColour = thirdcolor;
            cas.BackColour = fourthcolor;
            cas.ScaleX = scaleX;
            cas.ScaleY = scaleY;
            cas.Spacing = spacing;
            cas.Angle = angleZ;
            cas.Borderline = borderstyle;
            cas.Outline = outline;
            cas.Shadow = shadow;
            cas.Alignment = alignment;
            cas.MarginL = marginL;
            cas.MarginR = marginR;
            cas.MarginV = marginV;
            cas.Encoding = encoding;

            if (index != -1)
            {
                this.styles.Insert(index, cas);
            }
            else
            {
                this.styles.Add(cas);
            }
        }
    }
}
